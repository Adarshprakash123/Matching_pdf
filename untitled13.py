# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11-s_Bu9Cgk2Pt4YndgQ5U-9DSL_lgtGi
"""

!pip install PyPDF2
!pip install camelot-py[cv]
import PyPDF2
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Verify installation
import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted(["%s==%s" % (i.key, i.version) for i in installed_packages])
print(installed_packages_list)

!pip install PyPDF2 scikit-learn opencv-python-headless pytesseract camelot-py[cv]
!apt-get install -y poppler-utils
!pip install "camelot-py[cv]"
!apt-get install -y poppler-utils

import os

# Create a folder named 'pdf_paths'
os.makedirs('pdf_paths', exist_ok=True)

from google.colab import files

# Upload PDF files to the Colab environment
uploaded = files.upload()

# Move uploaded files to the 'pdf_paths' folder
for filename in uploaded.keys():
    os.rename(filename, os.path.join('pdf_paths', filename))

# Install necessary packages
!pip install "camelot-py[cv]"
!apt-get install -y poppler-utils
!apt-get install -y tesseract-ocr

import os
import PyPDF2
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import cv2
import pytesseract
import camelot

# Ensure the folder exists
folder_path = 'pdf_paths'
os.makedirs(folder_path, exist_ok=True)

# Function to extract text from a PDF
# Function to extract text from a PDF
def extract_text_from_pdf(pdf_path):
    text = ""
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        for page_num in range(len(reader.pages)):
            page = reader.pages[page_num]
            text += page.extract_text() or ""
    return text

# Function to extract text from images within the PDF
def extract_text_from_images(pdf_path):
    text = ""
    cmd = f"pdftoppm -jpeg {pdf_path} output"
    os.system(cmd)
    for file in os.listdir():
        if file.startswith("output") and file.endswith(".jpg"):
            image = cv2.imread(file)
            text += pytesseract.image_to_string(image)
            os.remove(file)
    return text

# Function to extract text from tables within the PDF
def extract_text_from_tables(pdf_path):
    try:
        tables = camelot.read_pdf(pdf_path, flavor='stream', backend='poppler')
        print(f"Number of tables found: {len(tables)}")  # Debugging line
        table_text = ""
        for table in tables:
            table_text += table.df.to_string()
        return table_text
    except Exception as e:
        print(f"Error extracting tables: {e}")
        return ""

# Function to extract features from text
def extract_features(text):
    keywords = re.findall(r'\b\w+\b', text.lower())
    invoice_number = re.search(r'invoice number[:\s]*(\S+)', text, re.IGNORECASE)
    invoice_date = re.search(r'date[:\s]*(\S+)', text, re.IGNORECASE)
    amount = re.search(r'amount[:\s]*([\d,.]+)', text, re.IGNORECASE)

    features = {
        'keywords': keywords,
        'invoice_number': invoice_number.group(1) if invoice_number else '',
        'invoice_date': invoice_date.group(1) if invoice_date else '',
        'amount': amount.group(1) if amount else ''
    }
    return features

# Function to calculate cosine similarity
def calculate_similarity(text1, text2):
    vectorizer = TfidfVectorizer().fit_transform([text1, text2])
    vectors = vectorizer.toarray()
    return cosine_similarity(vectors)[0, 1]

# Database to store invoices
database = []

# Function to add an invoice to the database
def add_invoice_to_database(pdf_path):
    text = extract_text_from_pdf(pdf_path)
    image_text = extract_text_from_images(pdf_path)
    table_text = extract_text_from_tables(pdf_path)
    full_text = text + image_text + table_text
    features = extract_features(full_text)
    database.append(features)

# Function to find the most similar invoice
def find_most_similar_invoice(input_pdf_path):
    input_text = extract_text_from_pdf(input_pdf_path)
    input_image_text = extract_text_from_images(input_pdf_path)
    input_table_text = extract_text_from_tables(input_pdf_path)
    input_full_text = input_text + input_image_text + input_table_text
    input_features = extract_features(input_full_text)

    max_similarity = 0
    most_similar_invoice = None

    for invoice in database:
        similarity = calculate_similarity(' '.join(input_features['keywords']), ' '.join(invoice['keywords']))
        if similarity > max_similarity:
            max_similarity = similarity
            most_similar_invoice = invoice

    return most_similar_invoice, max_similarity

# Main function to run the program
def main():
    # Ensure the folder exists
    folder_path = 'pdf_paths'

    # Verify if the folder exists
    if not os.path.exists(folder_path):
        print(f"Folder {folder_path} does not exist. Please upload your PDFs to this folder.")
        return

    # Get the list of PDF files in the folder
    pdf_files = [os.path.join(folder_path, file) for file in os.listdir(folder_path) if file.endswith('.pdf')]

    if len(pdf_files) < 2:
        print("Please upload at least two invoices in the folder.")
        return

    # Add existing invoices to the database
    for path in pdf_files[:-1]:
        add_invoice_to_database(path)

    # Find the most similar invoice for a new input invoice
    input_pdf_path = pdf_files[-1]
    similar_invoice, similarity_score = find_most_similar_invoice(input_pdf_path)

    if similar_invoice:
        print(f"Most similar invoice: {similar_invoice}")
        print(f"Similarity score: {similarity_score}")
    else:
        print("No similar invoice found.")

if __name__ == "__main__":
    main()